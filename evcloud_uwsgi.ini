[uwsgi]

project_base = /home/uwsgi
project_name = evcloud

#uwsgi的对外socket接口，nginx将通过该接口与uwsgi做数据交换，因为与nginx同在一个服务器内，不需要在防火墙上对端口8090做访问许可
# socket = 0:8001

# 直接做web服务器使用
http = 0:85

# 项目根目录
chdir = %(project_base)/%(project_name)

# 静态文件
static-map = /static/=%(chdir)/collect_static/
static-map2 = /favicon.ico=%(chdir)/collect_static/images/favicon.ico

# 项目中wsgi.py文件
wsgi-file = django_site/wsgi.py

# 存储pid进程
pidfile = %(chdir)/uwsgi-master.pid

# 存储log日志
daemonize = /var/log/nginx/%(project_name)_uwsgi.log

#以固定的文件大小（单位KB），切割日志文件。 例如：log-maxsize = 50000000  就是50M一个日志文件
log-maxsize = 50000000

# 不记录请求信息的日志, 只记录错误以及uWSGI内部消息到日志中
disable-logging = true

# 主进程
master = true

# 多进程&多线程
processes = 16
threads = 4
enable-threads = true

# .sock文件目录需与Nginx文件内的配置相同
;socket = %(chdir)/mysite.sock
;chmod-socket = 664

# clear environment on exit当服务器退出的时候自动删除unix socket文件和pid文件
vacuum = true

;内部http的socket超时时间
http-timeout = 20

# socket操作设置内部超时时间（默认4秒）
#socket-timeout = 300

;max-worker-lifetime = 100

#设置用于uwsgi包解析的内部缓存区大小为64k。默认是4k
buffer-size = 65536
post-buffering = 65536
# 请求体大小限制20MB
limit-post = 20971520

#设置在平滑的重启（直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数。
#这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束）
reload-mercy = 8

#为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。
#你可以使用这个选项来默默地对抗内存泄漏
max-requests = 2000

#通过使用POSIX/UNIX的setrlimit()函数来限制每个uWSGI进程的虚拟内存使用数。这个配置会限制uWSGI的进程占用虚拟内存不超过256M。
#如果虚拟内存已经达到256M，并继续申请虚拟内存则会使程序报内存错误，本次的http请求将返回500错误。
#limit-as = 256

#一个请求花费的时间超过了这个harakiri超时时间，那么这个请求都会被丢弃，并且当前处理这个请求的工作进程会被回收再利用（即重启）
#harakiri = 300

# 增加uwsgi listen 队列长度
listen = 128

# uwsgitop /tmp/stats.socket 可以实时监控uwsgi的状态
;stats = %(chdir)/uwsgi-stats.socket

# 当一个工作进程的虚拟内存占用超过了限制的大小(Mb)，那么该进程就会被回收重用（重启）
# reload-on-as = 1024
# 超过指定物理内存（Mb）的工作进程重启
reload-on-rss = 350
# 在没有主进程的情况下自动结束工作进程
# no-orphans = true
